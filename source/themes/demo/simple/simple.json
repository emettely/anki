{
  "★ Title": "What will each <code>residents[<b>‘key’</b>]</code> print out?",


  "☆ Subtitle": "Dictionaries",


  "☆ Syntax (inline code)": "d = {<b>‘key’</b>: <i>value</i>}",


  "★ Sample (code block)": "<div class=\"sourceCode\" id=\"cb1\"><pre\r\nclass=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"><\/a>residents <span class=\"op\">=<\/span> {<span class=\"st\">&#39;Puffin&#39;<\/span> : <span class=\"dv\">104<\/span>, <span class=\"st\">&#39;Sloth&#39;<\/span> : <span class=\"dv\">105<\/span>, <span class=\"st\">&#39;Burmese Python&#39;<\/span> : <span class=\"dv\">106<\/span>}<\/span>\r\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"><\/a><\/span>\r\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"><\/a><span class=\"bu\">print<\/span>(residents[<span class=\"st\">&#39;Puffin&#39;<\/span>])<\/span>\r\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"><\/a><span class=\"bu\">print<\/span>(residents[<span class=\"st\">&#39;Sloth&#39;<\/span>])<\/span>\r\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"><\/a><span class=\"bu\">print<\/span>(residents[<span class=\"st\">&#39;Burmese Python&#39;<\/span>])<\/span><\/code><\/pre><\/div>",


  "★ Key point (code block)": "<div class=\"sourceCode\" id=\"cb1\"><pre\r\nclass=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"><\/a><span class=\"dv\">104<\/span><\/span>\r\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"><\/a><span class=\"dv\">105<\/span><\/span>\r\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"><\/a><span class=\"dv\">106<\/span><\/span><\/code><\/pre><\/div>",


  "★ Key point notes": "<p>Access a dictionary item with it\u2019s <code>key<\/code>, which returns\r\nit\u2019s <code>value<\/code>. You can also change a value, or generate a\r\nbrand new value with the following syntax:<\/p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Change a value<\/th>\r\n<th>Add a new animal<\/th>\r\n<\/tr>\r\n<\/thead>\r\n<tbody>\r\n<tr>\r\n<td><code>residents['Burmese Python'] = 79<\/code><\/td>\r\n<td><code>residents['Giraffe'] = 200<\/code><\/td>\r\n<\/tr>\r\n<tr>\r\n<td>This will edit a value<\/td>\r\n<td>This will add a new key\/value pair<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\n<pre class=\"terminal\"><code>&gt; print(&quot;Burmese Python: &quot;, residents[&#39;Burmese Python&#39;])\r\nBurmese Python:  79\r\n&gt; print(&quot;Giraffe: &quot;, residents[&#39;Giraffe&#39;])\r\n200<\/code><\/pre>\r\n<p>A dictionary is similar to a list, but you access values by looking\r\nup a <code>key<\/code> instead of an index. A key can be any string or\r\nnumber. Dictionaries are enclosed in curly braces <code>{ }<\/code>.<\/p>",


  "✎ Other notes": "<p><strong>Warning:<\/strong> <a href=\"https:\/\/jeffknupp.com\/blog\/2015\/08\/30\/python-dictionaries\">Never search for a value in a dictionary using a for loop<\/a>! The <code>.items()<\/code> method allows you to iterate over both keys and values at the same time. The method returns a view object containing the dictionary\u2019s items as key-value tuples.<\/p>",


  "✎ Markdown": false,


  "Tags": "__anki-flashcards-2.13.0::python __anki-themes-2.13.0::demo testing"
}
