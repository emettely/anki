// Skylighting ===========
// Currently using Pandoc's highlighting script:
// - @link: https://github.com/jgm/skylighting
// - @link: https://stackoverflow.com/a/30884409
//
// #!: Base --font-color inherited from `dark.less`
// #!: Set some defaults and remove code if possible
// #!: A lot of repetition of sourceCode class ... why?
// #!: Should be `--code-color-dark-key` but Monokai-sublime uses pink


div.sourceCode {
  // pass
}

pre.sourceCode {
  // pass

  .numberSource {
    margin-left: 3em;
    padding-left: 4px;
    border-left: 1px solid #aaaaaa;

    code {
      counter-reset: source-line 0;

      > span {
        position: relative;
        left: -4em;
        counter-increment: source-line;

        > a:first-child::before {
          content: counter(source-line);
          position: relative;
          left: -1em;
          display: inline-block;
          width: 4em;
          padding: 0 4px;
          color: #aaaaaa;
          text-align: right;
          vertical-align: baseline;
          border: none;

          -webkit-touch-callout: none; -webkit-user-select: none;
          -khtml-user-select: none; -moz-user-select: none;
          -ms-user-select: none; user-select: none;
        }
      }
    }
  }
}

code.sourceCode {
  // pass

  & > span {
    &:empty {
      // #! was a set height
    }

    & > a:first-child::before {
      text-decoration: underline;  // #! Dunno what this does
    }
  }
}

.sourceCode {
  .simple-Sample &,
  .simple-KeyPoint_Code &,
  .missing-KeyPoint_Code & {
    // Alert
    .al { color: var(--color-code-dark-alert); font-weight: bold; }
    // Annotation
    .an { color: var(--color-code-dark-annotation); font-weight: bold; font-style: italic; }
    // Attribute
    .at { color: var(--color-code-dark-attribute); }
    // BaseN
    .bn { color: var(--color-code-dark-base-n); }
    // BuiltIn
    .bu { color: var(--color-code-dark-built-in); }
    // ControlFlow
    .cf { color: var(--color-code-dark-control-flow); font-weight: bold; }
    // Char
    .ch { color: var(--color-code-dark-char); }
    // Constant
    .cn { color: var(--color-code-dark-constant); }
    // Comment
    .co { color: var(--color-code-dark-comment); }
    // CommentVar
    .cv { color: var(--color-code-dark-comment-var); font-weight: bold; font-style: italic; }
    // Documentation
    .do { color: var(--color-code-dark-documentation); font-style: italic; }
    // DataType
    .dt { color: var(--color-code-dark-data-type); }
    // DecVal
    .dv { color: var(--color-code-dark-dec-val); }
    // Error
    .er { color: var(--color-code-dark-error); font-weight: bold; }
    // Extension
    .ex { color: var(--color-code-dark-extension); }
    // Float
    .fl { color: var(--color-code-dark-float); }
    // Function
    .fu { color: var(--color-code-dark-function); }
    // Import
    .im { color: var(--color-code-dark-import); }
    // Information
    .in { color: var(--color-code-dark-information); font-weight: bold; font-style: italic; }
    // Keyword
    .kw { color: var(--color-code-dark-keyword); font-weight: bold; }  // #!
    // Operator
    .op { color: var(--color-code-dark-operator); }
    // Other
    .ot { color: var(--color-code-dark-other); }
    // Preprocessor
    .pp { color: var(--color-code-dark-lowlight); }
    // SpecialChar
    .sc { color: var(--color-code-dark-special-char); }
    // SpecialString
    .ss { color: var(--color-code-dark-special-string); }
    // String
    .st { color: var(--color-code-dark-string); }
    // Variable
    .va { color: var(--color-code-dark-variable); }
    // VerbatimString
    .vs { color: var(--color-code-dark-verbatim-string); }
    // Warning
    .wa { color: var(--color-code-dark-warning); font-weight: bold; font-style: italic; }

  }
}


// #! ======
// .sourceCode { overflow: visible; }
@media screen {
// div.sourceCode { overflow: auto; }
}
@media print {
// code.sourceCode { white-space: pre-wrap; }
}
// #! ======
